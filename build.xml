<!--
    Build file for Account News.app project
-->
<project name="AccountNews" default="all" basedir=".">

    <property file="default.properties"/>
    <property environment="env"/>
    <property name="buildCommonDir_old" location="${basedir}/../../../common/build"/>
    <property name="buildCommonDir" location="${basedir}/../../../../../../axm/clients/platform/iOS/common/build" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${buildCommonDir}/tools/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- Supplied by the automated build server -->
    <property id="Certificate" name="Certificate" value="Distribution"/>
    <property id="SDK" name="SDK" value="Latest"/>
    <property id="Branch" name="Branch" value="main"/>

    <property name="localizationDir" location="${basedir}/../${ant.project.name}/localization"/>
    <property name="resourcesDir" location="${basedir}/../${ant.project.name}/res"/>
    <property name="builds" location="${basedir}/../${ant.project.name}/build"/>
    <property name="artifactDir" location="${builds}/artifacts"/>
    <property name="symbolDir" location="${artifactDir}/symbols"/>

    <property id="platform.iphoneos" name="platform.iphoneos" value="iphoneos"/>
    <property id="platform.iphonesimulator" name="platform.iphonesimulator" value="iphonesimulator"/>

    <property id="sdk.iphoneos" name="sdk.iphoneos" value="${platform.iphoneos}"/>
    <property id="sdk.iphonesimulator" name="sdk.iphonesimulator" value="${platform.iphonesimulator}"/>

    <property id="target.app" name="target.app" value="${ant.project.name}"/>
    <property id="target.demo" name="target.demo" value="StaticDemo"/>
    <property id="target.ut" name="target.ut" value="MobileTests"/>

    <property id="configuration.debug" name="configuration.debug" value="Debug"/>
    <property id="configuration.release" name="configuration.release" value="Release"/>
    <property id="configuration.dist" name="configuration.dist" value="Distribution"/>
    <property id="configuration.adhoc" name="configuration.adhoc" value="AdHoc"/>
    <property id="configuration.enterprise" name="configuration.enterprise" value="Internal"/>
    <property id="configuration.coverage" name="configuration.coverage" value="Coverage"/>

    <target name="all" depends="pre, build" description="do it all"/>

    <target name="build" description="builds all targets, runs unit tests ">
        <if>
            <equals arg1="${Certificate}" arg2="Distribution"/>
            <then>
                <antcall target="compileProductSimulatorRelease"/>
                <antcall target="compileProductDeviceRelease"/>
                <antcall target="compileProductDeviceAdHoc"/>
                <antcall target="compileProductDeviceDistribution"/>
            </then>
            <else>
                <antcall target="compileProductDeviceInternal"/>
            </else>
        </if>
    </target>

    <target name="pre" description="runs clanger, builds debug build, runs unit tests" depends="clean, initArtifacts, copyProvisions, runUtests, clanger"/>

    <target name="clean" description="delete any built resources" depends="cleanLocalization">
        <delete dir="${builds}" quiet="true"/>
    </target>

    <target name="copyProvisions" description="copy mobileprovision files">
        <copy todir="${user.home}/Library/MobileDevice/Provisioning Profiles">
            <fileset dir="provisioning/AppStore"/>
        </copy>
        <copy todir="${user.home}/Library/MobileDevice/Provisioning Profiles">
            <fileset dir="provisioning/Enterprise"/>
        </copy>
    </target>

    <target name="initArtifacts">
        <delete dir="${artifactDir}"/>
        <mkdir dir="${artifactDir}"/>
        <mkdir dir="${artifactDir}/symbols"/>
    </target>

    <!-- not used yet -->
    <target name="clanger" description="Run the source code static analysis">
        <mkdir dir="../${ant.project.name}/build/artifacts/clanger"/>
        <exec executable="${buildCommonDir}/checker/scan-build" failonerror="false" logError="true" resultproperty="clanger.returncode">
            <!-- this is a Perl regular expression for filenames to skip CLANG analysis. please do not skip Salesforce code -->
            <!-- hints: '^' matches the beginning of the line -->
            <!--        '$' matches the end of the line       -->
            <!-- we're skipping all the files matching TT*.m(Three20 library) filename because clanger considers init to be a release by mistake. Check when the newer releases of clanger are available -->
            <!-- we're skipping spr_ code because it is not modified in this project and may soon be removed -->
            <!-- we're skipping RegexKitLite because its garbage -->
            <env key="CLANG_SKIP_REGEXP" value="sqlite3_see.c$|TT.*.m$|spr_.*.c$|RegexKitLite.*"/>
            <arg line="--status-bugs -o ../${ant.project.name}/build/artifacts/clanger/ xcodebuild -project ../${ant.project.name}/${ant.project.name}.xcodeproj -target ${target.app} -configuration ${configuration.debug} -sdk ${sdk.iphonesimulator}"/>
        </exec>
        <!-- Don't fail yet
        <fail message="Clanger found errors">
            <condition>
                <equals arg1="${clanger.returncode}" arg2="1"/>
            </condition>
        </fail>
        -->
    </target>

    <target name="setVersionNumber">
        <mkdir dir="${builds}"/>
        <echo file="${builds}/build.txt" append="false">${app.version} Build ${label}</echo>
    </target>

    <target name="xcodebuild">
        <property name="action" value="build"/>
        <property name="artifact" value="${target}"/>
        <property name="sdk" value="${platform}"/>
        <echo>${action}ing ${target} ${configuration} for SDK ${sdk}</echo>
        <exec executable="xcodebuild" failonerror="true" logError="true">
            <arg line="-parallelizeTargets -project ../${ant.project.name}/${ant.project.name}.xcodeproj -target ${target} -configuration ${configuration} -sdk ${sdk} ${action} APP_VERSION=${app.version} CHANGELIST=${label}"/>
        </exec>
        <if>
            <and>
                <equals arg1="${action}" arg2="build"/>
                <isset property="artifactName"/>
            </and>
            <then>
                <mkdir dir="${artifactDir}"/>
                <mkdir dir="${symbolDir}"/>
                <antcall target="ditto-compress">
                    <param name="destfile" value="${symbolDir}/${artifactName}.dSYM.zip"/>
                    <param name="basedir" value="${builds}/${configuration}-${platform}/${artifact}.app.dSYM"/>
                </antcall>
                <if>
                    <equals arg1="${platform}" arg2="${platform.iphoneos}"/>
                    <then>
                        <antcall target="makeIPA">
                            <param name="app_path" value="${builds}/${configuration}-${platform}/${artifact}.app"/>
                            <param name="artifactName" value="${artifactName}"/>
                            <param name="configuration" value="${configuration}"/>
                            <param name="sdk" value="${platform}"/>
                        </antcall>
                    </then>
                    <else>
                        <antcall target="ditto-compress">
                            <param name="destfile" value="${artifactDir}/${artifactName}.zip"/>
                            <param name="basedir" value="${builds}/${configuration}-${platform}/${artifact}.app"/>
                        </antcall>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <target name="makeIPA">
        <propertycopy name="signvar" from="certificate.${configuration}.identity"/>
        <propertycopy name="embedvar" from="certificate.${configuration}.profile"/>

        <property name="ipa_path" value="${artifactDir}/${artifactName}.ipa"/>
        <property name="developer_name" value="${signvar}"/> 
        <property name="profile_path" value="${embedvar}"/> 
        <property name="sdk" value="${platform}"/>
        <echo>Making IPA ${ipa_path}</echo>

        <!-- build an .ipa file for easy installing on iTunes or OTA -->
        <exec executable="xcrun" failonerror="true" logError="true">
            <arg line="-sdk ${sdk} PackageApplication -v '${app_path}' -o '${ipa_path}' --sign '${developer_name}' --embed '${basedir}/${profile_path}'"/>
        </exec>
    </target>

    <target name="compileProductSimulatorRelease" depends="localizeResources, setVersionNumber">
        <antcall target="xcodebuild">
            <param name="target" refid="target.app"/>
            <param name="configuration" refid="configuration.release"/>
            <param name="platform" refid="platform.iphonesimulator"/>
            <param name="artifactName" value="${target.app}-iOS-${env.BUILD_NUMBER}-Simulator"/>
        </antcall>
    </target>

    <target name="compileProductDeviceRelease" depends="localizeResources, setVersionNumber">
        <antcall target="xcodebuild">
            <param name="target" refid="target.app"/>
            <param name="configuration" refid="configuration.release"/>
            <param name="platform" refid="platform.iphoneos"/>
            <param name="artifactName" value="${target.app}-iOS-${env.BUILD_NUMBER}-Device"/>
        </antcall>
    </target>

    <target name="compileProductDeviceDistribution" depends="localizeResources, setVersionNumber">
        <antcall target="xcodebuild">
            <param name="target" refid="target.app"/>
            <param name="configuration" refid="configuration.dist"/>
            <param name="platform" refid="platform.iphoneos"/>
            <param name="artifactName" value="${target.app}-iOS-${env.BUILD_NUMBER}-Distribution"/>
        </antcall>
    </target>

    <target name="compileProductDeviceAdHoc" depends="localizeResources, setVersionNumber">
        <antcall target="xcodebuild">
            <param name="target" refid="target.app"/>
            <param name="configuration" refid="configuration.adhoc"/>
            <param name="platform" refid="platform.iphoneos"/>
            <param name="artifactName" value="${target.app}-iOS-${env.BUILD_NUMBER}-AdHoc"/>
        </antcall>
    </target>

    <target name="compileProductDeviceInternal" depends="localizeResources, setVersionNumber">
        <antcall target="xcodebuild">
            <param name="target" refid="target.app"/>
            <param name="configuration" refid="configuration.enterprise"/>
            <param name="platform" refid="platform.iphoneos"/>
            <param name="artifactName" value="${target.app}-iOS-${env.BUILD_NUMBER}-Internal"/>
        </antcall>
    </target>
    
	<target name="compileFtestsCoverage" depends="localizeResources, setVersionNumber">
        <property name="ftestTarget" value="${target.app}-Frankified" />
        <antcall target="xcodebuild">
            <param name="target" value="${ftestTarget}"/>
            <param name="configuration" refid="configuration.coverage"/>
            <param name="platform" refid="platform.iphonesimulator"/>
        </antcall>
    </target>

    <target name="compileMobileTestsSimulatorDebug" depends="localizeResources, setVersionNumber">
        <antcall target="xcodebuild">
            <param name="target" refid="target.ut"/>
            <param name="configuration" refid="configuration.debug"/>
            <param name="platform" refid="platform.iphonesimulator"/>
            <param name="artifactName" value="Simulator-${target.ut}"/>
        </antcall>
    </target>

    <target name="runUtests" depends="compileMobileTestsSimulatorDebug" description="Run unit test suite">
      <property name="sdkPath" value="/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator${unittestSimulatorVersion}.sdk"/>
      <exec executable="mktemp" outputproperty="tmp_home">
        <arg value="-d"/> <!-- create a temp _d_irectory -->
        <arg value="-t"/> <!-- template -->
        <arg value="unittests"/>
      </exec>
      <echo message="Created temp Home at ${tmp_home}"/>
      <exec failonerror="true" executable="${basedir}/../${ant.project.name}/build/${configuration.debug}-iphonesimulator/${target.ut}.app/${target.ut}">
        <env key="IPHONE_SIMULATOR_ROOT" value="${sdkPath}"/>
        <env key="DYLD_ROOT_PATH" value="${sdkPath}"/>
        <env key="CFFIXED_USER_HOME" value="${tmp_home}"/>
        <arg value="-RegisterForSystemEvents" />
        <arg value="-AutoRun" />
      </exec>
      <!-- MobileTests app outputs an xml file into its temp dir that we can read -->
      <copy file="${tmp_home}/Documents/test-reports/junit.xml" tofile="${basedir}/../build/test-reports/TESTS-TestSuites.xml" />
              
      <delete dir="${tmp_home}"/>
    </target>
    

    <!-- User for 172, iosautomation.org
    # username = 'su@iosautomation.org'
    # password = 'standard1'  

    #username  = 'todd@mdev.com'
    #password  = 'test1234'

    # User for 170, mobiledev.com
    # username  = 'frank@mobiledev.com'
    # password  = '12345' 
    /-->

    <property name="username" value="Todd@mdev.com"/>
    <property name="password" value="test1234"/>
    <property name="url"      value="login-blitz04.soma.salesforce.com"/>
    <property name="tagname"  value=""/>      <!-- execute a specific tag (@tagname) -->
    <property name="filename" value=""/>      <!-- execute a specific feature file (filename.feature)   -->
    <property name="reset"    value="true"/>
    
    <target name="justRunFtests" description="Just run the ftest suite, without recompiling" >
        <!-- TODO: pull in the sdk version number from somewhere, rather than hardcoding -->
        <property name="sdkPath" value="/Developer/Platforms/${platform.iphonesimulator}.platform/Developer/SDKs/${platform.iphonesimulator}4.2.sdk" />

        <echo message="sdkPath:  ${sdkPath}"/>

        <exec executable="mktemp" outputproperty="tmp_home">
            <arg value="-d"/> <!-- create a temp _d_irectory -->
            <arg value="-t"/> <!-- template -->
            <arg value="ftests"/>
        </exec>
        <echo message="Created temp Home at ${tmp_home}"/>
        
        <property name="projHome" value="${basedir}/../${target.app}" />
        <!-- turn on accessibility for this app so we can read accessibilityLabels -->
        <copy file="${projHome}/Frank/com.apple.Accessibility.plist" tofile="${tmp_home}/Library/Preferences/com.apple.Accessibility.plist" />
        
        <property name="ftestExecPath" value="${projHome}/build/${configuration.coverage}-${platform.iphonesimulator}/${target.app}.app/${target.app}" />
        
        <exec failonerror="true" executable="cucumber" dir="${projHome}" >
            <arg value="--verbose" />
            <arg value="-f" />
            <arg value="junit" />
            <arg value="-o" />
            <arg value="test-reports" />
            <arg value="-n ${tagname}"/>
            <arg value="./features/${filename}" />
            <env key="IPHONE_SIMULATOR_ROOT" value="${sdkPath}" />
            <env key="DYLD_ROOT_PATH" value="${sdkPath}"/>
            <env key="CFFIXED_USER_HOME" value="${tmp_home}" />
            <env key="FTEST_EXEC_PATH" value="${ftestExecPath}" />
            <env key="FTEST_USERNAME" value="${username}"/>
            <env key="FTEST_PASSWORD" value="${password}"/>
            <env key="FTEST_URL" value="${url}"/>
            <env key="FTEST_RESET" value="${reset}"/>
        </exec>
        
        <!-- This can be used for debugging purposes, to kickoff the simulator from ant instead of cucumber -->
        <!--
        <echo message="ftestExecPath: ${ftestExecPath}" />
        <exec failonerror="true" executable="${ftestExecPath}" >
            <env key="IPHONE_SIMULATOR_ROOT" value="${sdkPath}"/>
            <env key="DYLD_ROOT_PATH" value="${sdkPath}"/>
            <env key="CFFIXED_USER_HOME" value="${tmp_home}"/>
            <arg value="-RegisterForSystemEvents"/>
        </exec>
        -->
        
        <delete dir="${tmp_home}"/>
    </target>
    
    
    
    <target name="runFtests" depends="compileFtestsCoverage,justRunFtests" description="Compile and run ftest suite">
     
    </target>
    
    
    <target name="ditto-compress">
        <exec executable="ditto">
            <arg value="-k"/> <!-- PKZip format -->
            <arg value="-c"/> <!-- compress -->
            <arg value="--keepParent"/>
            <arg value="${basedir}"/>
            <arg file="${destfile}"/>
        </exec>
    </target>

    <target name="cleanLocalization" description="removes old localization files" >
        <echo message="Removing Localizable.strings files..." level="info" />
        <delete file="${resourcesDir}\en.lproj\Localizable.strings" />
        <delete file="${resourcesDir}\es.lproj\Localizable.strings" />
        <delete file="${resourcesDir}\fr.lproj\Localizable.strings" />
        <delete file="${resourcesDir}\de.lproj\Localizable.strings" />
        <delete file="${resourcesDir}\ja.lproj\Localizable.strings" />
        <delete file="${resourcesDir}\zh_cn.lproj\Localizable.strings" />
        <echo message="Removing Settings bundle localization files..." level="info" />
        <delete file="${resourcesDir}\Settings.bundle\en.lproj\Root.strings" />
        <delete file="${resourcesDir}\Settings.bundle\es.lproj\Root.strings" />
        <delete file="${resourcesDir}\Settings.bundle\fr.lproj\Root.strings" />
        <delete file="${resourcesDir}\Settings.bundle\de.lproj\Root.strings" />
        <delete file="${resourcesDir}\Settings.bundle\ja.lproj\Root.strings" />
        <delete file="${resourcesDir}\Settings.bundle\zh_cn.lproj\Root.strings" />
    </target>

    <target name="localizeResources" description="converts xml language documents into appropriate iPhone .string resource files">
        <echo message="fake localization!!!!" />
    </target>
    <target name="localizeResourcesReal" description="converts xml language documents into appropriate iPhone .string resource files">
        
        <taskdef name="localize"
                 classname="com.salesforce.mobile.ant.LocalizeIphoneTask"
                 classpath="${buildCommonDir}/tools/LocalizeTask.jar"/>
        <echo message="Ensuring that all Settings.bundle subdirs exist" />
        <mkdir dir="${resourcesDir}\Settings.bundle\de.lproj" />
        <mkdir dir="${resourcesDir}\Settings.bundle\en.lproj" />
        <mkdir dir="${resourcesDir}\Settings.bundle\es.lproj" />
        <mkdir dir="${resourcesDir}\Settings.bundle\fr.lproj" />
        <mkdir dir="${resourcesDir}\Settings.bundle\it.lproj" />
        <mkdir dir="${resourcesDir}\Settings.bundle\ja.lproj" />
        <mkdir dir="${resourcesDir}\Settings.bundle\zh_cn.lproj" />
        <mkdir dir="${resourcesDir}\de.lproj"/>
        <mkdir dir="${resourcesDir}\en.lproj"/>
        <mkdir dir="${resourcesDir}\es.lproj" />
        <mkdir dir="${resourcesDir}\fr.lproj" />
        <mkdir dir="${resourcesDir}\it.lproj" />
        <mkdir dir="${resourcesDir}\ja.lproj" />
        <mkdir dir="${resourcesDir}\zh_cn.lproj" />

        <!-- German (de) -->
        <localize xmlFile="${localizationDir}\iPhoneDE.xml" outFile="${resourcesDir}\de.lproj\Localizable.strings" />
        <localize xmlFile="${localizationDir}\settings_de.xml" outFile="${resourcesDir}\Settings.bundle\de.lproj\Root.strings" />

        <!-- English (en) : default -->
        <localize xmlFile="${localizationDir}\iPhoneEN.xml" outFile="${resourcesDir}\en.lproj\Localizable.strings" />
        <localize xmlFile="${localizationDir}\settings_en.xml" outFile="${resourcesDir}\Settings.bundle\en.lproj\Root.strings" />

        <!-- Spanish (es) -->
        <localize xmlFile="${localizationDir}\iPhoneES.xml" outFile="${resourcesDir}\es.lproj\Localizable.strings" />
        <localize xmlFile="${localizationDir}\settings_es.xml" outFile="${resourcesDir}\Settings.bundle\es.lproj\Root.strings" />

        <!-- French (fr) -->
        <localize xmlFile="${localizationDir}\iPhoneFR.xml" outFile="${resourcesDir}\fr.lproj\Localizable.strings" />
        <localize xmlFile="${localizationDir}\settings_fr.xml" outFile="${resourcesDir}\Settings.bundle\fr.lproj\Root.strings" />

        <!-- Italian (it) -->
        <localize xmlFile="${localizationDir}\iPhoneIT.xml" outFile="${resourcesDir}\it.lproj\Localizable.strings" />
        <localize xmlFile="${localizationDir}\settings_it.xml" outFile="${resourcesDir}\Settings.bundle\it.lproj\Root.strings" />

        <!-- Japanese (ja) -->
        <localize xmlFile="${localizationDir}\iPhoneJA.xml" outFile="${resourcesDir}\ja.lproj\Localizable.strings" />
        <localize xmlFile="${localizationDir}\settings_ja.xml" outFile="${resourcesDir}\Settings.bundle\ja.lproj\Root.strings" />

        <!-- Chinese (ZH_cn) -->
        <localize xmlFile="${localizationDir}\iPhoneZH_cn.xml" outFile="${resourcesDir}\zh_cn.lproj\Localizable.strings" />
        <localize xmlFile="${localizationDir}\settings_zh_cn.xml" outFile="${resourcesDir}\Settings.bundle\zh_cn.lproj\Root.strings" />
    </target>
</project>
